  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "elsif" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure
  LL1 warning in RepeatStatement: "break" is the start of several alternatives

   1 using Library;
   2 using System.Collections.Generic;
   3 
   4 COMPILER Parva $D
   5 /* Parva level 1 grammar  - Coco/R for C#
   6    Chifamba, Chiyoka, Mutowo, Ngwarai
   7    Java/C# operator precedences with short circuit evaluation
   8    Void functions, value parameter passing,
   9    but no globals or value returning functions
  10    int, bool, char types supported
  11    as for Prac 7, CSC 301 2018
  12    2018/09/04 */
  13 
  14   public static bool  // set/used by pragmas or cmd line args
  15     debug    = false,
  16     optimize = false,
  17     listCode = false,
  18     warnings = true;
  19 
  20   const bool
  21     known = true;
  22 
  23   // This next method might better be located in the code
  24   // generator.  Traditionally it has been left in the ATG
  25   // file, but that might change in future years.
  26   //
  27   // Note that while sequences like \n \r and \t result in
  28   // special mappings to lf, cr and tab, other sequences  
  29   // like \x \: and \9 simply map to x, ; and 9 .  
  30   // Most students don't seem to know this!
  31 
  32   static string Unescape(string s) {
  33   /* Replaces escape sequences in s by their Unicode values */
  34     StringBuilder buf = new StringBuilder();
  35     int i = 0;
  36     while (i < s.Length) {
  37       if (s[i] == '\\') {
  38         switch (s[i+1]) {
  39           case '\\': buf.Append('\\'); break;
  40           case '\'': buf.Append('\''); break;
  41           case '\"': buf.Append('\"'); break;
  42           case  'r': buf.Append('\r'); break;
  43           case  'n': buf.Append('\n'); break;
  44           case  't': buf.Append('\t'); break;
  45           case  'b': buf.Append('\b'); break;
  46           case  'f': buf.Append('\f'); break;
  47           default:   buf.Append(s[i+1]); break;
  48         }
  49         i += 2;
  50       }
  51       else {
  52         buf.Append(s[i]);
  53         i++;
  54       }
  55     }
  56     return buf.ToString();
  57   } // Unescape
  58 
  59   // the following is global for expediency (fewer parameters needed)
  60 
  61   static Label mainEntryPoint = new Label(!known);
  62 
  63   static bool IsArith(int type) {
  64     return type == Types.intType || type == Types.charType || type == Types.noType;
  65   } // IsArith
  66 
  67   static bool IsBool(int type) {
  68     return type == Types.boolType || type == Types.noType;
  69   } // IsBool
  70 
  71   static bool IsArray(int type) {
  72     return (type % 2) == 1;
  73   } // IsArray
  74 
  75   static bool Compatible(int typeOne, int typeTwo) {
  76   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  77     return    typeOne == typeTwo
  78            || IsArith(typeOne) && IsArith(typeTwo)
  79            || typeOne == Types.noType || typeTwo == Types.noType
  80            || IsArray(typeOne) && typeTwo == Types.nullType
  81            || IsArray(typeTwo) && typeOne == Types.nullType;
  82   } // Compatible
  83 
  84   static bool Assignable(int typeOne, int typeTwo) {
  85   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  86     return    typeOne == typeTwo
  87            || typeOne == Types.intType && typeTwo == Types.charType
  88            || typeOne == Types.noType || typeTwo == Types.noType
  89            || IsArray(typeOne) && typeTwo == Types.nullType;
  90   } // Assignable
  91 
  92   static bool IsCall(out DesType des) {
  93     Entry entry = Table.Find(la.val);
  94     des = new DesType(entry);
  95     return entry.kind == Kinds.Fun;
  96   } // IsCall
  97 
  98 /* -------------------------------------------------------- */
  99 
 100 CHARACTERS
 101   lf         = CHR(10) .
 102   backslash  = CHR(92) .
 103   control    = CHR(0) .. CHR(31) .
 104   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 105   digit      = "0123456789" .
 106   stringCh   = ANY - '"' - control - backslash .
 107   charCh     = ANY - "'" - control - backslash .
 108   printable  = ANY - control .
 109 
 110 TOKENS
 111   identifier = letter { { "_" } (letter | digit) } .
 112   number     = digit { digit } .
 113   stringLit  = '"' { stringCh | backslash printable } '"' .
 114   charLit    = "'" ( charCh   | backslash printable ) "'" .
 115 
 116 PRAGMAS
 117   CodeOn      = "$C+" .              (. listCode  = true; .)
 118   CodeOff     = "$C-" .              (. listCode  = false; .)
 119   DebugOn     = "$D+" .              (. debug     = true; .)
 120   DebugOff    = "$D-" .              (. debug     = false; .)
 121   StackDump   = "$SD" .              (. if(debug) CodeGen.Stack(); .)
 122   HeapDump    = "$HD" .              (. if(debug) CodeGen.Heap(); .)
 123   TableDump   = "$ST" . (. if(debug) Table.PrintTable(OutFile.StdOut); .)
 124 
 125 COMMENTS FROM "//" TO lf
 126 COMMENTS FROM "/*" TO "*/"
 127 
 128 IGNORE CHR(9) .. CHR(13)
 129 
 130 PRODUCTIONS
 131 
 132   Parva
 133                              (. CodeGen.FrameHeader();
 134 					     // no arguments
 135                                 CodeGen.Call(mainEntryPoint);
 136 						// forward, incomplete
 137                                 CodeGen.LeaveProgram(); .)     						// return to O/S
 138   = {   FuncDeclaration } EOF  (. if 
 139 						(!mainEntryPoint.IsDefined())
 140                          SemError("missing Main function"); .)
 141   .
 142 
 143   FuncDeclaration
 144                        (. StackFrame frame = new StackFrame();
 145                           Entry function = new Entry(); .)
 146   =  "void" Ident<out function.name>  
 147 					(. function.kind = Kinds.Fun;
 148                               function.type = Types.voidType;
 149                               function.nParams = 0;
 150                               function.firstParam = null;
 151 	                  function.entryPoint = new Label(known);
 152                               Table.Insert(function);
 153                               Table.OpenScope(); .)
 154      "(" FormalParameters<function> ")"      
 155 				(. frame.size = CodeGen.headerSize + 
 156 					function.nParams;
 157                    if (function.name.ToUpper().Equals("MAIN")
 158                        && !mainEntryPoint.IsDefined()
 159                        && function.nParams == 0) {
 160                            mainEntryPoint.Here(); } .)
 161      Body<frame>              (. Table.CloseScope(); .)
 162   .
 163 
 164   FormalParameters<Entry func>  (. Entry param; .)
 165   = [ OneParam<out param, func> (. func.firstParam = param; .)
 166       { WEAK "," OneParam<out param, func> }
 167     ] .
 168 
 169   OneParam<out Entry param, Entry func>
 170 					(. param = new Entry();
 171                              param.kind = Kinds.Var;
 172            param.offset = CodeGen.headerSize + func.nParams;
 173                              func.nParams++; .)
 174   =  Type<out param.type>
 175      Ident<out param.name>         (. Table.Insert(param); .)
 176   .
 177 
 178   Body<StackFrame frame> (. Label DSPLabel = new Label(known);
 179                             int sizeMark = frame.size;
 180                             CodeGen.OpenStackFrame(0); .)
 181   =  "{" { Statement<frame> } WEAK "}"       
 182 			(. CodeGen.FixDSP(DSPLabel.Address(), 
 183 				frame.size - sizeMark);
 184                      CodeGen.LeaveVoidFunction(); .)
 185   .
 186 
 187   Statement<StackFrame frame>     (. string msg = ""; Label tmp = new Label(known); .)
 188   =  SYNC (   Block<frame>
 189             | ConstDeclarations
 190             | VarDeclarations<frame>
 191             | AssignmentOrCall
 192             | IfStatement<frame>
 193             | WhileStatement<frame>
 194             | DoWhileStatement<frame>
 195             | RepeatStatement<frame>
 196             | HaltStatement<msg>
 197             | ReturnStatement
 198             | ReadStatement
 199             | WriteStatement
 200             | SwitchStatement<frame>
 201             | BreakStatement<tmp>     
 202             | ";"
 203           ) .
 204 
 205 
 206   BreakStatement<Label exit>
 207   = "break"             (. CodeGen.Branch(exit); .)
 208   .
 209 
 210   Block<StackFrame frame>
 211   =                                  (. Table.OpenScope(); .)
 212      "{" { Statement<frame> }
 213      WEAK "}"                        (. Table.CloseScope(); .)
 214   .
 215 
 216   ConstDeclarations
 217   = "const" OneConst { WEAK "," OneConst }
 218     WEAK ";"
 219   .
 220 
 221   OneConst                   (. Entry constant = new Entry();
 222                                 ConstRec con; .)
 223   =  Ident<out constant.name> (. constant.kind = Kinds.Con; .)
 224      AssignOp Constant<out con>  
 225 			            (. constant.value = con.value;
 226                                constant.type = con.type;
 227                                Table.Insert(constant); .)
 228   .
 229 
 230   Constant<out ConstRec con>       (. con = new ConstRec(); .)
 231   =   IntConst<out con.value>  (. con.type = Types.intType; .)
 232     | CharConst<out con.value>(. con.type = Types.charType; .)
 233     | "true"                     (. con.type = Types.boolType; 
 234 						    con.value = 1; .)
 235     | "false"                    (. con.type = Types.boolType;
 236 						    con.value = 0; .)
 237     | "null"                     (. con.type = Types.nullType;
 238 						    con.value = 0; .)
 239   .
 240 
 241   VarDeclarations<StackFrame frame>          (. int type; .)
 242   =  Type<out type>
 243      VarList<frame, type>
 244      WEAK ";"
 245   .
 246 
 247   Type<out int type>
 248   =  BasicType<out type>
 249      [ "[]"                                  (. type++; .)
 250      ] .
 251 
 252 
 253   BasicType<out int type>         (. type = Types.noType; .)
 254   =   "int"                       (. type = Types.intType; .)
 255     | "bool"                      (. type = Types.boolType; .)
 256     | "char"                      (. type = Types.charType; .)
 257   .
 258 
 259 
 260   VarList<StackFrame frame, int type>
 261   =  OneVar<frame, type>
 262      { WEAK "," OneVar<frame, type> }
 263   .
 264 
 265   OneVar<StackFrame frame, int type>    (. int expType;
 266                                    Entry var = new Entry(); .)
 267   =  Ident<out var.name>           (. var.kind = Kinds.Var;
 268                                       var.type = type;
 269                                       var.offset = frame.size;
 270                                       frame.size++; .)
 271      [ AssignOp                (. CodeGen.LoadAddress(var); .)
 272        Expression<out expType>   (. if (!Assignable(var.type,
 273 							 expType))
 274                  SemError("incompatible types in assignment");
 275                                   CodeGen.Assign(var.type); .)
 276      ]                                (. Table.Insert(var); .)
 277   .
 278 
 279 
 280   AssignmentOrCall                     (. int expType;
 281                                           DesType des; .)
 282   =  (  IF (IsCall(out des)) // resolver handles LL1 conflict
 283          identifier               (. CodeGen.FrameHeader(); .)
 284          "(" Arguments<des> ")"   (. CodeGen.Call
 285 						    (des.entry.entryPoint); .)
 286       |  Designator<out des>      (. if (des.entry.kind !=
 287 								 Kinds.Var)
 288                          		SemError("cannot assign to " + 
 289 				    Kinds.kindNames[des.entry.kind]); .)
 290          AssignOp
 291          Expression<out expType>  (. if (!Assignable(des.type,
 292 							 expType))
 293                                 SemError("incompatible types in assignment");
 294                                 CodeGen.Assign(des.type); .)
 295      ) WEAK ";"
 296   .
 297 
 298   Arguments<DesType des>        (. int argCount = 0;
 299                            Entry fp = des.entry.firstParam; .)
 300   =  [ OneArg<fp>               (. argCount++; if (fp != null)
 301 							 fp = fp.nextInScope; .)
 302        { WEAK "," OneArg<fp>    (. argCount++; if (fp != null)
 303 							 fp = fp.nextInScope;.)
 304        }
 305      ]                          (. if (argCount !=
 306 								 des.entry.nParams)
 307                      SemError("wrong number of arguments"); .)
 308   .
 309 
 310   OneArg<Entry fp>                 (. int argType; .)
 311   =  (  Expression<out argType>    (. if (fp != null && 
 312 						!Assignable(fp.type, argType))
 313                         SemError("argument type mismatch"); .)
 314      )
 315   .
 316 
 317   Designator<out DesType des>           (. string name;
 318                                            int indexType; .)
 319   =  Ident<out name>        (. Entry entry = Table.Find(name);
 320                                if (!entry.declared)
 321                            SemError("undeclared identifier");
 322                                des = new DesType(entry);
 323                                if (entry.kind == Kinds.Var)
 324                                 CodeGen.LoadAddress(entry); .)
 325      [  "["              	 (. if (IsArray(des.type))
 326 							 des.type--;
 327                         		else 
 328 					  SemError("unexpected subscript");
 329                                if (des.entry.kind !=
 330 								 Kinds.Var)
 331                              SemError("unexpected subscript"); 
 332                                CodeGen.Dereference(); .)
 333         Expression<out indexType>  (. if (!IsArith(indexType))
 334                            SemError("invalid subscript type");
 335                                       CodeGen.Index(); .)
 336 
 337            "]"
 338      ]
 339   .
 340 
 341   IfStatement<StackFrame frame>
 342                    			          (. Label falseLabel = 
 343 							                    new Label(!known);                                  
 344                                   Label ifExit = new Label(!known); .)                                   
 345 
 346 
 347   =  "if" "(" Condition ")"   ["then" (. SemError("Should 'then' be here?");.)]     (. CodeGen.BranchFalse
 348 							                	(falseLabel); .)
 349         Statement<frame>        (. CodeGen.Branch(ifExit) ; falseLabel.Here(); .)
 350 
 351        {                            (. Label elsIfExit = new Label (!known); .)
 352          "elsif" "(" Condition ")" (.  CodeGen.BranchFalse(elsIfExit);.)
 353          Statement<frame>         (. CodeGen.Branch(ifExit) ; elsIfExit.Here(); .)       
 354        }
 355 
 356        [ "else" Statement<frame>  ] (. ifExit.Here(); .)
 357 
 358      
 359   .
 360 
 361 
 362   WhileStatement<StackFrame frame>    (. Label loopExit  =
 363 								 new Label(!known);
 364                  
 365                                          Label loopStart =
 366 							    new Label(known); .)
 367   =  "while" "(" Condition ")"        (. CodeGen.BranchFalse
 368 								(loopExit); .)
 369      Statement<frame>                 (. CodeGen.Branch
 370 								(loopStart);
 371                                          loopExit.Here(); .)
 372   .
 373 
 374   DoWhileStatement<StackFrame frame>    (. Label loopExit  =
 375 								 new Label(!known);
 376                                          Label loopStart =
 377 							    new Label(known); .)
 378   =   "do" Statement<frame>      
 379   
 380   "while" "(" Condition ")"        (. CodeGen.BranchFalse(loopExit); 
 381                                       CodeGen.Branch(loopStart);
 382                                       loopExit.Here(); .)     
 383   .
 384   
 385   RepeatStatement<StackFrame frame>     (. Label loopExit  =
 386 								 new Label(!known);
 387 
 388                  Label brexit  =
 389 								 new Label(!known);
 390                                          Label loopStart =
 391 							    new Label(known); .)
 392 
 393   = "repeat" {
 394                 Statement<frame> 
 395                 | BreakStatement<loopExit>    
 396             }        
 397 
 398     "until" "(" Condition ")" (. CodeGen.BranchFalse(loopStart);
 399                                  CodeGen.Branch(loopExit);
 400                                  loopExit.Here();
 401                                  brexit.Here();
 402                                   .)    
 403   . 
 404 
 405   SwitchStatement<StackFrame frame>       (. int expType; .)
 406   = "switch"
 407     "(" Expression<out expType>
 408     ")" "{"
 409       { CaseLabelList
 410         Statement<frame>
 411         { Statement<frame>
 412         } }
 413       [ "default" ":"
 414         { Statement<frame>
 415         } ]
 416     "}"
 417   .
 418 
 419   CaseLabelList
 420   = CaseLabel { CaseLabel }
 421   .
 422 
 423   CaseLabel                              	(. ConstRec con; .)
 424   = "case" [ "+" | "-" ]
 425     Constant<out con>
 426     ":"
 427   .
 428                                         
 429   HaltStatement<string printMsg = "">
 430   =  "halt"                     (. CodeGen.WriteString(printMsg); CodeGen.LeaveProgram(); .)
 431      WEAK ";"
 432   .
 433 
 434   ReturnStatement
 435   =  "return"               (. CodeGen.LeaveVoidFunction(); .)
 436      WEAK ";"
 437   .
 438 
 439   ReadStatement
 440   = "read" "(" ReadList ")" WEAK ";"
 441     | "readLine"  "(" ReadListLine ")" WEAK ";"
 442   .
 443 
 444   ReadListLine
 445   = ReadElement { WEAK "," ReadElement } (. CodeGen.ReadLine(); .)
 446   .
 447   ReadList
 448   = ReadElement { WEAK "," ReadElement } 
 449   .
 450 
 451 
 452   ReadElement                        (. string str;
 453                                         DesType des; .)
 454   =   StringConst<out str>     (. CodeGen.WriteString(str); .)
 455     | Designator<out des>            (. if (des.entry.kind !=
 456 								 Kinds.Var)
 457                          SemError("wrong kind of identifier");
 458                                   switch (des.type) {
 459                                     case Types.intType:
 460                                     case Types.boolType:
 461                                     case Types.charType:
 462                                        CodeGen.Read(des.type);
 463 							  break;
 464                                     default:
 465                             SemError("cannot read this type");
 466 							  break;
 467                                                     } .)
 468   .
 469 
 470   WriteStatement
 471   =  "write" "(" WriteList ")" WEAK ";"
 472   | "writeLine" "(" WriteListLine ")" WEAK ";"
 473   .
 474 
 475   WriteListLine
 476   = WriteElement { WEAK "," WriteElement } (. CodeGen.WriteLine(); .)
 477   .
 478 
 479   WriteList
 480   = WriteElement { WEAK "," WriteElement }
 481   .
 482 
 483   WriteElement                  (. int expType; string str;.)
 484   =   StringConst<out str>      (. CodeGen.WriteString(str);.)
 485     | Expression<out expType>   (. if (!(IsArith(expType) ||
 486 						 expType == Types.boolType))
 487                            SemError("cannot write this type");
 488                                  switch (expType) {
 489                                    case Types.intType:
 490                                    case Types.boolType:
 491                                    case Types.charType:
 492                                      CodeGen.Write(expType);
 493 							break;
 494                                    default:  break;
 495                                                     } .)
 496   .
 497 
 498   Condition                       (. int type; .)
 499   =  Expression<out type>         (. if (!IsBool(type))
 500                      SemError("Boolean expression needed");.)
 501   .
 502 
 503   Expression<out int type>        (. int type2;
 504                     Label shortcircuit = new Label(!known); .)
 505   =  AndExp<out type>
 506      { "||"                       (. CodeGen.BooleanOp
 507 						(shortcircuit, CodeGen.or); .)
 508        AndExp<out type2>          (. if (!IsBool(type) || 
 509 								!IsBool(type2))
 510                           SemError("Boolean operands needed");
 511                                      type = Types.boolType; .)
 512      }                            (. shortcircuit.Here(); .)
 513   .
 514 
 515   AndExp<out int type>            (. int type2;
 516                                      Label shortcircuit = new
 517 								 Label(!known); .)
 518   =  EqlExp<out type>
 519      { "&&"                       (. CodeGen.BooleanOp
 520 					(shortcircuit, CodeGen.and); .)
 521        EqlExp<out type2>          (. if (!IsBool(type) || 
 522 							!IsBool(type2))
 523                        SemError("Boolean operands needed");
 524                                      type = Types.boolType; .)
 525      }                            (. shortcircuit.Here(); .)
 526   .
 527 
 528   EqlExp<out int type>            (. int type2;
 529                                      int op; .)
 530   =  RelExp<out type>
 531      { EqualOp<out op>
 532        RelExp<out type2>      (. if (!Compatible(type, type2))
 533                        SemError("incomparable operand types");
 534                                  CodeGen.Comparison(op, type);
 535                                  type = Types.boolType; .)
 536      }
 537   .
 538 
 539   RelExp<out int type>           (. int type2; int op; .)
 540   =  AddExp<out type>
 541      [ RelOp<out op>
 542        AddExp<out type2>         (. if (!IsArith(type) || 
 543 								!IsArith(type2))
 544                     SemError("incomparable operand types");
 545                                  CodeGen.Comparison(op, type);
 546                                  type = Types.boolType; .)
 547      ]
 548   .
 549 
 550   AddExp<out int type>           (. int type2; int op; .)
 551   =  MultExp<out type>
 552      { AddOp<out op>
 553        MultExp<out type2>        (. if (IsArith(type) &&
 554 							 IsArith(type2)) {
 555                                       type = Types.intType;
 556                                       CodeGen.BinaryOp(op);
 557                                      }
 558                                     else {
 559                        SemError("arithmetic operands needed");
 560                                           type = Types.noType;
 561                                          } .)
 562      }
 563   .
 564 
 565   MultExp<out int type>           (. int type2; int op; .)
 566   =  Factor<out type>
 567      { MulOp<out op>
 568        Factor<out type2>          (. if (IsArith(type) &&
 569 							   IsArith(type2)) {
 570                                        type = Types.intType;
 571                                        CodeGen.BinaryOp(op);
 572                                        }
 573                                       else {
 574                        SemError("arithmetic operands needed");
 575                                           type = Types.noType;
 576                                            } .)
 577      }
 578   .
 579 
 580   Factor<out int type>              (. type = Types.noType; .)
 581   =    Primary<out type>
 582      | "+" Factor<out type>         (. if (!IsArith(type)) {
 583                         SemError("arithmetic operand needed");
 584                                           type = Types.noType;
 585                                         }
 586                                        else 
 587 							type = Types.intType; .)
 588      | "-" Factor<out type>         (. if (!IsArith(type)) {
 589                         SemError("arithmetic operand needed");
 590                                           type = Types.noType;
 591                                         }
 592                                        else
 593 							   type = Types.intType;
 594                                     CodeGen.NegateInteger();.)
 595      | "!" Factor<out type>     (. if (!IsBool(type))
 596                            SemError("Boolean operand needed");
 597                                    type = Types.boolType;
 598                                    CodeGen.NegateBoolean(); .)
 599   .
 600 
 601   Primary<out int type>         (. type = Types.noType;
 602                                    int size;
 603                                    DesType des;
 604                                    ConstRec con; .)
 605   =    Designator<out des>      (. type = des.type;
 606                                    switch (des.entry.kind) {
 607                                     case Kinds.Var:
 608                                         CodeGen.Dereference();
 609                                         break;
 610                                     case Kinds.Con:
 611                         CodeGen.LoadConstant(des.entry.value);
 612                                         break;
 613                                     default:
 614                          SemError("wrong kind of identifier");
 615                                         break;
 616                                     } .)
 617      | Constant<out con>        (. type = con.type;
 618                             CodeGen.LoadConstant(con.value);.)
 619      | "new"
 620        (   BasicType<out type>
 621            "[" Expression<out size>    (. if (!IsArith(size))
 622                        SemError("array size must be integer");
 623                                           type++; .)
 624            "]"
 625        )                             (. CodeGen.Allocate(); .)
 626 
 627      | "("
 628        (   "char" ")"
 629            Factor<out type>     	     (. if (!IsArith(type))
 630                                      SemError("invalid cast");
 631                                        else 
 632 							  type = Types.charType;
 633                                       CodeGen.CastToChar(); .)
 634          | "int" ")"
 635            Factor<out type>          (. if (!IsArith(type))
 636                                      SemError("invalid cast");
 637                                        else 
 638 							type = Types.intType; .)
 639          | Expression<out type> ")"
 640        )
 641 
 642     |      (. int count = 0; int expType = 0; .)
 643       "max" "(" Expression<out type> (. count++; .)
 644             {"," Expression<out type> (. count++; .) } ")"
 645                                 (. CodeGen.Max(count); .)      
 646 
 647     |     (. int count = 0; int expType = 0; .)
 648       "min" "(" Expression<out type> (. count++; .)
 649             {"," Expression<out type> (. count++; .) } ")"
 650                                 (. CodeGen.Min(count); .) 
 651     | (. int expType = 0; .)   
 652       "sqr" "(" Expression<out type> ")" (. CodeGen.Sqr(); .)
 653   
 654   .
 655 
 656   AddOp<out int op>                   	(. op = CodeGen.nop; .)
 657   =    "+"                            (. op = CodeGen.add; .)
 658      | "-"                            (. op = CodeGen.sub; .)
 659   .
 660 
 661   MulOp<out int op>                   (. op = CodeGen.nop; .)
 662   =    "*"                            (. op = CodeGen.mul; .)
 663      | "/"                            (. op = CodeGen.div; .)
 664      | "%"                            (. op = CodeGen.rem; .)
 665   .
 666 
 667   EqualOp<out int op>                 (. op = CodeGen.nop; .)
 668   =    "=="                           (. op = CodeGen.ceq; .)
 669      | "!="                           (. op = CodeGen.cne; .)                           
 670      | "="                            (. SemError("Did you mean == ?"); op = CodeGen.ceq; .)
 671      | "<>"                           (. SemError("Did you mean != ?"); op = CodeGen.cne; .)      
 672   .
 673 
 674   RelOp<out int op>                   (. op = CodeGen.nop; .)
 675   =    "<"                            (. op = CodeGen.clt; .)
 676      | "<="                           (. op = CodeGen.cle; .)
 677      | ">"                            (. op = CodeGen.cgt; .)
 678      | ">="                           (. op = CodeGen.cge; .)
 679   .
 680 
 681   AssignOp = 
 682         "=" 
 683       | ":="                          (. SemError("Did you mean '=' ?"); .)
 684   .
 685 
 686   Ident<out string name>
 687   =  identifier                       (. name = token.val; .)
 688   .
 689 
 690   StringConst<out string str>
 691   =  stringLit                        (. str = token.val;
 692                                          str = Unescape
 693 				(str.Substring(1, str.Length - 2)); .)
 694   .
 695 
 696   CharConst<out int value>
 697   =  charLit                        (. string str = token.val;
 698                                        str = Unescape
 699 					(str.Substring(1, str.Length - 2));
 700                                        value = str[0]; .)
 701   .
 702 
 703   IntConst<out int value>
 704   =  number                         (. try {value =
 705 						 Convert.ToInt32(token.val);
 706                                        } catch (Exception) {
 707                                          value = 0; 
 708 					SemError("number out of range");
 709                                              } .)
 710   .
 711 
 712 END Parva.
 713 

0 errors detected
5 warnings detected

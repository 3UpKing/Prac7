  Warning: FormalParameters is deletable
  Warning: Arguments is deletable

   1 using Library;
   2 using System.Collections.Generic;
   3 
   4 COMPILER Parva $D
   5 /* Parva level 1 grammar  - Coco/R for C#
   6    Chifamba, Chiyoka, Mutowo, Ngwarai
   7    Java/C# operator precedences with short circuit evaluation
   8    Void functions, value parameter passing,
   9    but no globals or value returning functions
  10    int, bool, char types supported
  11    as for Prac 7, CSC 301 2018
  12    2018/09/04 */
  13 
  14   public static bool  // set/used by pragmas or cmd line args
  15     debug    = false,
  16     optimize = false,
  17     listCode = false,
  18     warnings = true;
  19 
  20   const bool
  21     known = true;
  22 
  23   // This next method might better be located in the code
  24   // generator.  Traditionally it has been left in the ATG
  25   // file, but that might change in future years.
  26   //
  27   // Note that while sequences like \n \r and \t result in
  28   // special mappings to lf, cr and tab, other sequences  
  29   // like \x \: and \9 simply map to x, ; and 9 .  
  30   // Most students don't seem to know this!
  31 
  32   static string Unescape(string s) {
  33   /* Replaces escape sequences in s by their Unicode values */
  34     StringBuilder buf = new StringBuilder();
  35     int i = 0;
  36     while (i < s.Length) {
  37       if (s[i] == '\\') {
  38         switch (s[i+1]) {
  39           case '\\': buf.Append('\\'); break;
  40           case '\'': buf.Append('\''); break;
  41           case '\"': buf.Append('\"'); break;
  42           case  'r': buf.Append('\r'); break;
  43           case  'n': buf.Append('\n'); break;
  44           case  't': buf.Append('\t'); break;
  45           case  'b': buf.Append('\b'); break;
  46           case  'f': buf.Append('\f'); break;
  47           default:   buf.Append(s[i+1]); break;
  48         }
  49         i += 2;
  50       }
  51       else {
  52         buf.Append(s[i]);
  53         i++;
  54       }
  55     }
  56     return buf.ToString();
  57   } // Unescape
  58 
  59   // the following is global for expediency (fewer parameters needed)
  60 
  61   static Label mainEntryPoint = new Label(!known);
  62 
  63   static bool IsArith(int type) {
  64     return type == Types.intType || type == Types.charType || type == Types.noType;
  65   } // IsArith
  66 
  67   static bool IsBool(int type) {
  68     return type == Types.boolType || type == Types.noType;
  69   } // IsBool
  70 
  71   static bool IsArray(int type) {
  72     return (type % 2) == 1;
  73   } // IsArray
  74 
  75   static bool Compatible(int typeOne, int typeTwo) {
  76   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  77     return    typeOne == typeTwo
  78            || IsArith(typeOne) && IsArith(typeTwo)
  79            || typeOne == Types.noType || typeTwo == Types.noType
  80            || IsArray(typeOne) && typeTwo == Types.nullType
  81            || IsArray(typeTwo) && typeOne == Types.nullType;
  82   } // Compatible
  83 
  84   static bool Assignable(int typeOne, int typeTwo) {
  85   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  86     return    typeOne == typeTwo
  87            || typeOne == Types.intType && typeTwo == Types.charType
  88            || typeOne == Types.noType || typeTwo == Types.noType
  89            || IsArray(typeOne) && typeTwo == Types.nullType;
  90   } // Assignable
  91 
  92   static bool IsCall(out DesType des) {
  93     Entry entry = Table.Find(la.val);
  94     des = new DesType(entry);
  95     return entry.kind == Kinds.Fun;
  96   } // IsCall
  97 
  98 /* -------------------------------------------------------- */
  99 
 100 CHARACTERS
 101   lf         = CHR(10) .
 102   backslash  = CHR(92) .
 103   control    = CHR(0) .. CHR(31) .
 104   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 105   digit      = "0123456789" .
 106   stringCh   = ANY - '"' - control - backslash .
 107   charCh     = ANY - "'" - control - backslash .
 108   printable  = ANY - control .
 109 
 110 TOKENS
 111   identifier = letter { { "_" } (letter | digit) } .
 112   number     = digit { digit } .
 113   stringLit  = '"' { stringCh | backslash printable } '"' .
 114   charLit    = "'" ( charCh   | backslash printable ) "'" .
 115 
 116 PRAGMAS
 117   CodeOn      = "$C+" .              (. listCode  = true; .)
 118   CodeOff     = "$C-" .              (. listCode  = false; .)
 119   DebugOn     = "$D+" .              (. debug     = true; .)
 120   DebugOff    = "$D-" .              (. debug     = false; .)
 121   StackDump   = "$SD" .              (. if(debug) CodeGen.Stack(); .)
 122   HeapDump    = "$HD" .              (. if(debug) CodeGen.Heap(); .)
 123   TableDump   = "$ST" . (. if(debug) Table.PrintTable(OutFile.StdOut); .)
 124 
 125 COMMENTS FROM "//" TO lf
 126 COMMENTS FROM "/*" TO "*/"
 127 
 128 IGNORE CHR(9) .. CHR(13)
 129 
 130 PRODUCTIONS
 131 
 132   Parva
 133                              (. CodeGen.FrameHeader();
 134 					     // no arguments
 135                                 CodeGen.Call(mainEntryPoint);
 136 						// forward, incomplete
 137                                 CodeGen.LeaveProgram(); .)     						// return to O/S
 138   = {   FuncDeclaration } EOF  (. if 
 139 						(!mainEntryPoint.IsDefined())
 140                          SemError("missing Main function"); .)
 141   .
 142 
 143   FuncDeclaration
 144                        (. StackFrame frame = new StackFrame();
 145                           Entry function = new Entry(); .)
 146   =  "void" Ident<out function.name>  
 147 					(. function.kind = Kinds.Fun;
 148                               function.type = Types.voidType;
 149                               function.nParams = 0;
 150                               function.firstParam = null;
 151 	                  function.entryPoint = new Label(known);
 152                               Table.Insert(function);
 153                               Table.OpenScope(); .)
 154      "(" FormalParameters<function> ")"      
 155 				(. frame.size = CodeGen.headerSize + 
 156 					function.nParams;
 157                    if (function.name.ToUpper().Equals("MAIN")
 158                        && !mainEntryPoint.IsDefined()
 159                        && function.nParams == 0) {
 160                            mainEntryPoint.Here(); } .)
 161      Body<frame>              (. Table.CloseScope(); .)
 162   .
 163 
 164   FormalParameters<Entry func>  (. Entry param; .)
 165   = [ OneParam<out param, func> (. func.firstParam = param; .)
 166       { WEAK "," OneParam<out param, func> }
 167     ] .
 168 
 169   OneParam<out Entry param, Entry func>
 170 					(. param = new Entry();
 171                              param.kind = Kinds.Var;
 172            param.offset = CodeGen.headerSize + func.nParams;
 173                              func.nParams++; .)
 174   =  Type<out param.type>
 175      Ident<out param.name>         (. Table.Insert(param); .)
 176   .
 177 
 178   Body<StackFrame frame> (. Label DSPLabel = new Label(known);
 179                             int sizeMark = frame.size;
 180                             CodeGen.OpenStackFrame(0); .)
 181   =  "{" { Statement<frame> } WEAK "}"       
 182 			(. CodeGen.FixDSP(DSPLabel.Address(), 
 183 				frame.size - sizeMark);
 184                      CodeGen.LeaveVoidFunction(); .)
 185   .
 186 
 187   Statement<StackFrame frame>     (. string msg = ""; .)
 188   =  SYNC (   Block<frame>
 189             | ConstDeclarations
 190             | VarDeclarations<frame>
 191             | AssignmentOrCall
 192             | IfStatement<frame>
 193             | WhileStatement<frame>
 194             | DoWhileStatement<frame>
 195             | RepeatStatement<frame>
 196             | HaltStatement<msg>
 197             | ReturnStatement
 198             | ReadStatement
 199             | WriteStatement
 200             | SwitchStatement<frame>
 201             | ";"
 202           ) .
 203 
 204   Block<StackFrame frame>
 205   =                                  (. Table.OpenScope(); .)
 206      "{" { Statement<frame> }
 207      WEAK "}"                        (. Table.CloseScope(); .)
 208   .
 209 
 210   ConstDeclarations
 211   = "const" OneConst { WEAK "," OneConst }
 212     WEAK ";"
 213   .
 214 
 215   OneConst                   (. Entry constant = new Entry();
 216                                 ConstRec con; .)
 217   =  Ident<out constant.name> (. constant.kind = Kinds.Con; .)
 218      AssignOp Constant<out con>  
 219 			            (. constant.value = con.value;
 220                                constant.type = con.type;
 221                                Table.Insert(constant); .)
 222   .
 223 
 224   Constant<out ConstRec con>       (. con = new ConstRec(); .)
 225   =   IntConst<out con.value>  (. con.type = Types.intType; .)
 226     | CharConst<out con.value>(. con.type = Types.charType; .)
 227     | "true"                     (. con.type = Types.boolType; 
 228 						    con.value = 1; .)
 229     | "false"                    (. con.type = Types.boolType;
 230 						    con.value = 0; .)
 231     | "null"                     (. con.type = Types.nullType;
 232 						    con.value = 0; .)
 233   .
 234 
 235   VarDeclarations<StackFrame frame>          (. int type; .)
 236   =  Type<out type>
 237      VarList<frame, type>
 238      WEAK ";"
 239   .
 240 
 241   Type<out int type>
 242   =  BasicType<out type>
 243      [ "[]"                                  (. type++; .)
 244      ] .
 245 
 246 
 247   BasicType<out int type>         (. type = Types.noType; .)
 248   =   "int"                       (. type = Types.intType; .)
 249     | "bool"                      (. type = Types.boolType; .)
 250     | "char"                      (. type = Types.charType; .)
 251   .
 252 
 253 
 254   VarList<StackFrame frame, int type>
 255   =  OneVar<frame, type>
 256      { WEAK "," OneVar<frame, type> }
 257   .
 258 
 259   OneVar<StackFrame frame, int type>    (. int expType;
 260                                    Entry var = new Entry(); .)
 261   =  Ident<out var.name>           (. var.kind = Kinds.Var;
 262                                       var.type = type;
 263                                       var.offset = frame.size;
 264                                       frame.size++; .)
 265      [ AssignOp                (. CodeGen.LoadAddress(var); .)
 266        Expression<out expType>   (. if (!Assignable(var.type,
 267 							 expType))
 268                  SemError("incompatible types in assignment");
 269                                   CodeGen.Assign(var.type); .)
 270      ]                                (. Table.Insert(var); .)
 271   .
 272 
 273 
 274   AssignmentOrCall                     (. int expType;
 275                                           DesType des; .)
 276   =  (  IF (IsCall(out des)) // resolver handles LL1 conflict
 277          identifier               (. CodeGen.FrameHeader(); .)
 278          "(" Arguments<des> ")"   (. CodeGen.Call
 279 						    (des.entry.entryPoint); .)
 280       |  Designator<out des>      (. if (des.entry.kind !=
 281 								 Kinds.Var)
 282                          		SemError("cannot assign to " + 
 283 				    Kinds.kindNames[des.entry.kind]); .)
 284          AssignOp
 285          Expression<out expType>  (. if (!Assignable(des.type,
 286 							 expType))
 287                                 SemError("incompatible types in assignment");
 288                                 CodeGen.Assign(des.type); .)
 289      ) WEAK ";"
 290   .
 291 
 292   Arguments<DesType des>        (. int argCount = 0;
 293                            Entry fp = des.entry.firstParam; .)
 294   =  [ OneArg<fp>               (. argCount++; if (fp != null)
 295 							 fp = fp.nextInScope; .)
 296        { WEAK "," OneArg<fp>    (. argCount++; if (fp != null)
 297 							 fp = fp.nextInScope;.)
 298        }
 299      ]                          (. if (argCount !=
 300 								 des.entry.nParams)
 301                      SemError("wrong number of arguments"); .)
 302   .
 303 
 304   OneArg<Entry fp>                 (. int argType; .)
 305   =  (  Expression<out argType>    (. if (fp != null && 
 306 						!Assignable(fp.type, argType))
 307                         SemError("argument type mismatch"); .)
 308      )
 309   .
 310 
 311   Designator<out DesType des>           (. string name;
 312                                            int indexType; .)
 313   =  Ident<out name>        (. Entry entry = Table.Find(name);
 314                                if (!entry.declared)
 315                            SemError("undeclared identifier");
 316                                des = new DesType(entry);
 317                                if (entry.kind == Kinds.Var)
 318                                 CodeGen.LoadAddress(entry); .)
 319      [  "["              	 (. if (IsArray(des.type))
 320 							 des.type--;
 321                         		else 
 322 					  SemError("unexpected subscript");
 323                                if (des.entry.kind !=
 324 								 Kinds.Var)
 325                              SemError("unexpected subscript"); 
 326                                CodeGen.Dereference(); .)
 327         Expression<out indexType>  (. if (!IsArith(indexType))
 328                            SemError("invalid subscript type");
 329                                       CodeGen.Index(); .)
 330 
 331            "]"
 332      ]
 333   .
 334 
 335   IfStatement<StackFrame frame>
 336                    			  (. Label falseLabel = 
 337 							new Label(!known); .)
 338   =  "if" "(" Condition ")"   ["then" (. SemError("Should 'then' be here?");.)]     (. CodeGen.BranchFalse
 339 								(falseLabel); .)
 340         Statement<frame>          (. falseLabel.Here(); .)
 341   .
 342 
 343 
 344   WhileStatement<StackFrame frame>    (. Label loopExit  =
 345 								 new Label(!known);
 346                                          Label loopStart =
 347 							    new Label(known); .)
 348   =  "while" "(" Condition ")"        (. CodeGen.BranchFalse
 349 								(loopExit); .)
 350      Statement<frame>                 (. CodeGen.Branch
 351 								(loopStart);
 352                                          loopExit.Here(); .)
 353   .
 354 
 355   DoWhileStatement<StackFrame frame>    (. Label loopExit  =
 356 								 new Label(!known);
 357                                          Label loopStart =
 358 							    new Label(known); .)
 359   =   "do" Statement<frame>      
 360   
 361   "while" "(" Condition ")"        (. CodeGen.BranchFalse(loopExit); 
 362                                       CodeGen.Branch(loopStart);
 363                                       loopExit.Here(); .)     
 364   .
 365   
 366   RepeatStatement<StackFrame frame>     (. Label loopExit  =
 367 								 new Label(!known);
 368                                          Label loopStart =
 369 							    new Label(known); .)
 370 
 371   = "repeat" {Statement<frame>}
 372 
 373     "until" "(" Condition ")" (. CodeGen.BranchFalse(loopExit);
 374                                  CodeGen.Branch(loopStart);
 375                                  loopExit.Here(); .)
 376   . 
 377 
 378   SwitchStatement<StackFrame frame>       (. int expType; .)
 379   = "switch"
 380     "(" Expression<out expType>
 381     ")" "{"
 382       { CaseLabelList
 383         Statement<frame>
 384         { Statement<frame>
 385         } }
 386       [ "default" ":"
 387         { Statement<frame>
 388         } ]
 389     "}"
 390   .
 391 
 392   CaseLabelList
 393   = CaseLabel { CaseLabel }
 394   .
 395 
 396   CaseLabel                              	(. ConstRec con; .)
 397   = "case" [ "+" | "-" ]
 398     Constant<out con>
 399     ":"
 400   .
 401                                         
 402   HaltStatement<string printMsg = "">
 403   =  "halt"                     (. CodeGen.WriteString(printMsg); CodeGen.LeaveProgram(); .)
 404      WEAK ";"
 405   .
 406 
 407   ReturnStatement
 408   =  "return"               (. CodeGen.LeaveVoidFunction(); .)
 409      WEAK ";"
 410   .
 411 
 412   ReadStatement
 413   = "read" "(" ReadList ")" WEAK ";"
 414     | "readLine"  "(" ReadListLine ")" WEAK ";"
 415   .
 416 
 417   ReadListLine
 418   = ReadElement { WEAK "," ReadElement } (. CodeGen.ReadLine(); .)
 419   .
 420   ReadList
 421   = ReadElement { WEAK "," ReadElement } 
 422   .
 423 
 424 
 425   ReadElement                        (. string str;
 426                                         DesType des; .)
 427   =   StringConst<out str>     (. CodeGen.WriteString(str); .)
 428     | Designator<out des>            (. if (des.entry.kind !=
 429 								 Kinds.Var)
 430                          SemError("wrong kind of identifier");
 431                                   switch (des.type) {
 432                                     case Types.intType:
 433                                     case Types.boolType:
 434                                     case Types.charType:
 435                                        CodeGen.Read(des.type);
 436 							  break;
 437                                     default:
 438                             SemError("cannot read this type");
 439 							  break;
 440                                                     } .)
 441   .
 442 
 443   WriteStatement
 444   =  "write" "(" WriteList ")" WEAK ";"
 445   | "writeLine" "(" WriteListLine ")" WEAK ";"
 446   .
 447 
 448   WriteListLine
 449   = WriteElement { WEAK "," WriteElement } (. CodeGen.WriteLine(); .)
 450   .
 451 
 452   WriteList
 453   = WriteElement { WEAK "," WriteElement }
 454   .
 455 
 456   WriteElement                  (. int expType; string str;.)
 457   =   StringConst<out str>      (. CodeGen.WriteString(str);.)
 458     | Expression<out expType>   (. if (!(IsArith(expType) ||
 459 						 expType == Types.boolType))
 460                            SemError("cannot write this type");
 461                                  switch (expType) {
 462                                    case Types.intType:
 463                                    case Types.boolType:
 464                                    case Types.charType:
 465                                      CodeGen.Write(expType);
 466 							break;
 467                                    default:  break;
 468                                                     } .)
 469   .
 470 
 471   Condition                       (. int type; .)
 472   =  Expression<out type>         (. if (!IsBool(type))
 473                      SemError("Boolean expression needed");.)
 474   .
 475 
 476   Expression<out int type>        (. int type2;
 477                     Label shortcircuit = new Label(!known); .)
 478   =  AndExp<out type>
 479      { "||"                       (. CodeGen.BooleanOp
 480 						(shortcircuit, CodeGen.or); .)
 481        AndExp<out type2>          (. if (!IsBool(type) || 
 482 								!IsBool(type2))
 483                           SemError("Boolean operands needed");
 484                                      type = Types.boolType; .)
 485      }                            (. shortcircuit.Here(); .)
 486   .
 487 
 488   AndExp<out int type>            (. int type2;
 489                                      Label shortcircuit = new
 490 								 Label(!known); .)
 491   =  EqlExp<out type>
 492      { "&&"                       (. CodeGen.BooleanOp
 493 					(shortcircuit, CodeGen.and); .)
 494        EqlExp<out type2>          (. if (!IsBool(type) || 
 495 							!IsBool(type2))
 496                        SemError("Boolean operands needed");
 497                                      type = Types.boolType; .)
 498      }                            (. shortcircuit.Here(); .)
 499   .
 500 
 501   EqlExp<out int type>            (. int type2;
 502                                      int op; .)
 503   =  RelExp<out type>
 504      { EqualOp<out op>
 505        RelExp<out type2>      (. if (!Compatible(type, type2))
 506                        SemError("incomparable operand types");
 507                                  CodeGen.Comparison(op, type);
 508                                  type = Types.boolType; .)
 509      }
 510   .
 511 
 512   RelExp<out int type>           (. int type2; int op; .)
 513   =  AddExp<out type>
 514      [ RelOp<out op>
 515        AddExp<out type2>         (. if (!IsArith(type) || 
 516 								!IsArith(type2))
 517                     SemError("incomparable operand types");
 518                                  CodeGen.Comparison(op, type);
 519                                  type = Types.boolType; .)
 520      ]
 521   .
 522 
 523   AddExp<out int type>           (. int type2; int op; .)
 524   =  MultExp<out type>
 525      { AddOp<out op>
 526        MultExp<out type2>        (. if (IsArith(type) &&
 527 							 IsArith(type2)) {
 528                                       type = Types.intType;
 529                                       CodeGen.BinaryOp(op);
 530                                      }
 531                                     else {
 532                        SemError("arithmetic operands needed");
 533                                           type = Types.noType;
 534                                          } .)
 535      }
 536   .
 537 
 538   MultExp<out int type>           (. int type2; int op; .)
 539   =  Factor<out type>
 540      { MulOp<out op>
 541        Factor<out type2>          (. if (IsArith(type) &&
 542 							   IsArith(type2)) {
 543                                        type = Types.intType;
 544                                        CodeGen.BinaryOp(op);
 545                                        }
 546                                       else {
 547                        SemError("arithmetic operands needed");
 548                                           type = Types.noType;
 549                                            } .)
 550      }
 551   .
 552 
 553   Factor<out int type>              (. type = Types.noType; .)
 554   =    Primary<out type>
 555      | "+" Factor<out type>         (. if (!IsArith(type)) {
 556                         SemError("arithmetic operand needed");
 557                                           type = Types.noType;
 558                                         }
 559                                        else 
 560 							type = Types.intType; .)
 561      | "-" Factor<out type>         (. if (!IsArith(type)) {
 562                         SemError("arithmetic operand needed");
 563                                           type = Types.noType;
 564                                         }
 565                                        else
 566 							   type = Types.intType;
 567                                     CodeGen.NegateInteger();.)
 568      | "!" Factor<out type>     (. if (!IsBool(type))
 569                            SemError("Boolean operand needed");
 570                                    type = Types.boolType;
 571                                    CodeGen.NegateBoolean(); .)
 572   .
 573 
 574   Primary<out int type>         (. type = Types.noType;
 575                                    int size;
 576                                    DesType des;
 577                                    ConstRec con; .)
 578   =    Designator<out des>      (. type = des.type;
 579                                    switch (des.entry.kind) {
 580                                     case Kinds.Var:
 581                                         CodeGen.Dereference();
 582                                         break;
 583                                     case Kinds.Con:
 584                         CodeGen.LoadConstant(des.entry.value);
 585                                         break;
 586                                     default:
 587                          SemError("wrong kind of identifier");
 588                                         break;
 589                                     } .)
 590      | Constant<out con>        (. type = con.type;
 591                             CodeGen.LoadConstant(con.value);.)
 592      | "new"
 593        (   BasicType<out type>
 594            "[" Expression<out size>    (. if (!IsArith(size))
 595                        SemError("array size must be integer");
 596                                           type++; .)
 597            "]"
 598        )                             (. CodeGen.Allocate(); .)
 599 
 600      | "("
 601        (   "char" ")"
 602            Factor<out type>     	     (. if (!IsArith(type))
 603                                      SemError("invalid cast");
 604                                        else 
 605 							  type = Types.charType;
 606                                       CodeGen.CastToChar(); .)
 607          | "int" ")"
 608            Factor<out type>          (. if (!IsArith(type))
 609                                      SemError("invalid cast");
 610                                        else 
 611 							type = Types.intType; .)
 612          | Expression<out type> ")"
 613        )
 614   .
 615 
 616   AddOp<out int op>                   	(. op = CodeGen.nop; .)
 617   =    "+"                            (. op = CodeGen.add; .)
 618      | "-"                            (. op = CodeGen.sub; .)
 619   .
 620 
 621   MulOp<out int op>                   (. op = CodeGen.nop; .)
 622   =    "*"                            (. op = CodeGen.mul; .)
 623      | "/"                            (. op = CodeGen.div; .)
 624      | "%"                            (. op = CodeGen.rem; .)
 625   .
 626 
 627   EqualOp<out int op>                 (. op = CodeGen.nop; .)
 628   =    "=="                           (. op = CodeGen.ceq; .)
 629      | "!="                           (. op = CodeGen.cne; .)                           
 630      | "="                            (. SemError("Did you mean == ?"); op = CodeGen.ceq; .)
 631      | "<>"                           (. SemError("Did you mean != ?"); op = CodeGen.cne; .)      
 632   .
 633 
 634   RelOp<out int op>                   (. op = CodeGen.nop; .)
 635   =    "<"                            (. op = CodeGen.clt; .)
 636      | "<="                           (. op = CodeGen.cle; .)
 637      | ">"                            (. op = CodeGen.cgt; .)
 638      | ">="                           (. op = CodeGen.cge; .)
 639   .
 640 
 641   AssignOp = 
 642         "=" 
 643       | ":="                          (. SemError("Did you mean '=' ?"); .)
 644   .
 645 
 646   Ident<out string name>
 647   =  identifier                       (. name = token.val; .)
 648   .
 649 
 650   StringConst<out string str>
 651   =  stringLit                        (. str = token.val;
 652                                          str = Unescape
 653 				(str.Substring(1, str.Length - 2)); .)
 654   .
 655 
 656   CharConst<out int value>
 657   =  charLit                        (. string str = token.val;
 658                                        str = Unescape
 659 					(str.Substring(1, str.Length - 2));
 660                                        value = str[0]; .)
 661   .
 662 
 663   IntConst<out int value>
 664   =  number                         (. try {value =
 665 						 Convert.ToInt32(token.val);
 666                                        } catch (Exception) {
 667                                          value = 0; 
 668 					SemError("number out of range");
 669                                              } .)
 670   .
 671 
 672 END Parva.
 673 

0 errors detected
2 warnings detected

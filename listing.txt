  Warning: FormalParameters is deletable
  Warning: Arguments is deletable
  LL1 warning in IfStatement: "elsif" is the start & successor of a deletable structure
  LL1 warning in IfStatement: "else" is the start & successor of a deletable structure

   1 using Library;
   2 using System.Collections.Generic;
   3 
   4 COMPILER Parva $D
   5 /* Parva level 1 grammar  - Coco/R for C#
   6    Chifamba, Chiyoka, Mutowo, Ngwarai
   7    Java/C# operator precedences with short circuit evaluation
   8    Void functions, value parameter passing,
   9    but no globals or value returning functions
  10    int, bool, char types supported
  11    as for Prac 7, CSC 301 2018
  12    2018/09/04 */
  13 
  14   public static bool  // set/used by pragmas or cmd line args
  15     debug    = false,
  16     optimize = false,
  17     listCode = false,
  18     warnings = true;
  19 
  20   const bool
  21     known = true;
  22 
  23   // This next method might better be located in the code
  24   // generator.  Traditionally it has been left in the ATG
  25   // file, but that might change in future years.
  26   //
  27   // Note that while sequences like \n \r and \t result in
  28   // special mappings to lf, cr and tab, other sequences  
  29   // like \x \: and \9 simply map to x, ; and 9 .  
  30   // Most students don't seem to know this!
  31 
  32   static string Unescape(string s) {
  33   /* Replaces escape sequences in s by their Unicode values */
  34     StringBuilder buf = new StringBuilder();
  35     int i = 0;
  36     while (i < s.Length) {
  37       if (s[i] == '\\') {
  38         switch (s[i+1]) {
  39           case '\\': buf.Append('\\'); break;
  40           case '\'': buf.Append('\''); break;
  41           case '\"': buf.Append('\"'); break;
  42           case  'r': buf.Append('\r'); break;
  43           case  'n': buf.Append('\n'); break;
  44           case  't': buf.Append('\t'); break;
  45           case  'b': buf.Append('\b'); break;
  46           case  'f': buf.Append('\f'); break;
  47           default:   buf.Append(s[i+1]); break;
  48         }
  49         i += 2;
  50       }
  51       else {
  52         buf.Append(s[i]);
  53         i++;
  54       }
  55     }
  56     return buf.ToString();
  57   } // Unescape
  58 
  59   // the following is global for expediency (fewer parameters needed)
  60 
  61   static Label mainEntryPoint = new Label(!known);
  62 
  63   static bool IsArith(int type) {
  64     return type == Types.intType || type == Types.charType || type == Types.noType;
  65   } // IsArith
  66 
  67   static bool IsBool(int type) {
  68     return type == Types.boolType || type == Types.noType;
  69   } // IsBool
  70 
  71   static bool IsArray(int type) {
  72     return (type % 2) == 1;
  73   } // IsArray
  74 
  75   static bool Compatible(int typeOne, int typeTwo) {
  76   // Returns true if typeOne is compatible (and comparable for equality) with typeTwo
  77     return    typeOne == typeTwo
  78            || IsArith(typeOne) && IsArith(typeTwo)
  79            || typeOne == Types.noType || typeTwo == Types.noType
  80            || IsArray(typeOne) && typeTwo == Types.nullType
  81            || IsArray(typeTwo) && typeOne == Types.nullType;
  82   } // Compatible
  83 
  84   static bool Assignable(int typeOne, int typeTwo) {
  85   // Returns true if a variable of typeOne may be assigned a value of typeTwo
  86     return    typeOne == typeTwo
  87            || typeOne == Types.intType && typeTwo == Types.charType
  88            || typeOne == Types.noType || typeTwo == Types.noType
  89            || IsArray(typeOne) && typeTwo == Types.nullType;
  90   } // Assignable
  91 
  92   static bool IsCall(out DesType des) {
  93     Entry entry = Table.Find(la.val);
  94     des = new DesType(entry);
  95     return entry.kind == Kinds.Fun;
  96   } // IsCall
  97 
  98 /* -------------------------------------------------------- */
  99 
 100 CHARACTERS
 101   lf         = CHR(10) .
 102   backslash  = CHR(92) .
 103   control    = CHR(0) .. CHR(31) .
 104   letter     = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" .
 105   digit      = "0123456789" .
 106   stringCh   = ANY - '"' - control - backslash .
 107   charCh     = ANY - "'" - control - backslash .
 108   printable  = ANY - control .
 109 
 110 TOKENS
 111   identifier = letter { { "_" } (letter | digit) } .
 112   number     = digit { digit } .
 113   stringLit  = '"' { stringCh | backslash printable } '"' .
 114   charLit    = "'" ( charCh   | backslash printable ) "'" .
 115 
 116 PRAGMAS
 117   CodeOn      = "$C+" .              (. listCode  = true; .)
 118   CodeOff     = "$C-" .              (. listCode  = false; .)
 119   DebugOn     = "$D+" .              (. debug     = true; .)
 120   DebugOff    = "$D-" .              (. debug     = false; .)
 121   StackDump   = "$SD" .              (. if(debug) CodeGen.Stack(); .)
 122   HeapDump    = "$HD" .              (. if(debug) CodeGen.Heap(); .)
 123   TableDump   = "$ST" . (. if(debug) Table.PrintTable(OutFile.StdOut); .)
 124 
 125 COMMENTS FROM "//" TO lf
 126 COMMENTS FROM "/*" TO "*/"
 127 
 128 IGNORE CHR(9) .. CHR(13)
 129 
 130 PRODUCTIONS
 131 
 132   Parva
 133                              (. CodeGen.FrameHeader();
 134 					     // no arguments
 135                                 CodeGen.Call(mainEntryPoint);
 136 						// forward, incomplete
 137                                 CodeGen.LeaveProgram(); .)     						// return to O/S
 138   = {   FuncDeclaration } EOF  (. if 
 139 						(!mainEntryPoint.IsDefined())
 140                          SemError("missing Main function"); .)
 141   .
 142 
 143   FuncDeclaration
 144                        (. StackFrame frame = new StackFrame();
 145                           Entry function = new Entry(); .)
 146   =  "void" Ident<out function.name>  
 147 					(. function.kind = Kinds.Fun;
 148                               function.type = Types.voidType;
 149                               function.nParams = 0;
 150                               function.firstParam = null;
 151 	                  function.entryPoint = new Label(known);
 152                               Table.Insert(function);
 153                               Table.OpenScope(); .)
 154      "(" FormalParameters<function> ")"      
 155 				(. frame.size = CodeGen.headerSize + 
 156 					function.nParams;
 157                    if (function.name.ToUpper().Equals("MAIN")
 158                        && !mainEntryPoint.IsDefined()
 159                        && function.nParams == 0) {
 160                            mainEntryPoint.Here(); } .)
 161      Body<frame>              (. Table.CloseScope(); .)
 162   .
 163 
 164   FormalParameters<Entry func>  (. Entry param; .)
 165   = [ OneParam<out param, func> (. func.firstParam = param; .)
 166       { WEAK "," OneParam<out param, func> }
 167     ] .
 168 
 169   OneParam<out Entry param, Entry func>
 170 					(. param = new Entry();
 171                              param.kind = Kinds.Var;
 172            param.offset = CodeGen.headerSize + func.nParams;
 173                              func.nParams++; .)
 174   =  Type<out param.type>
 175      Ident<out param.name>         (. Table.Insert(param); .)
 176   .
 177 
 178   Body<StackFrame frame> (. Label DSPLabel = new Label(known);
 179                             int sizeMark = frame.size;
 180                             CodeGen.OpenStackFrame(0); .)
 181   =  "{" { Statement<frame> } WEAK "}"       
 182 			(. CodeGen.FixDSP(DSPLabel.Address(), 
 183 				frame.size - sizeMark);
 184                      CodeGen.LeaveVoidFunction(); .)
 185   .
 186 
 187   Statement<StackFrame frame>     (. string msg = ""; .)
 188   =  SYNC (   Block<frame>
 189             | ConstDeclarations
 190             | VarDeclarations<frame>
 191             | AssignmentOrCall
 192             | IfStatement<frame>
 193             | WhileStatement<frame>
 194             | DoWhileStatement<frame>
 195             | RepeatStatement<frame>
 196             | HaltStatement<msg>
 197             | ReturnStatement
 198             | ReadStatement
 199             | WriteStatement
 200             | SwitchStatement<frame>
 201             | BreakStatement<frame>
 202             | ";"
 203           ) .
 204 
 205 /*
 206   MaxStatement<StackFrame frame>        (.int intType = 0; .)
 207   = "max" "(" Expression<intType> {"," Expression<intType> } ")"      
 208   .
 209 
 210   MinStatement<StackFrame frame>        (.int intType = 0; .)
 211   = "min" "(" Expression<intType> {"," Expression<intType> } ")"     
 212   .
 213 */
 214 
 215   BreakStatement<StackFrame frame>
 216   = "break"
 217   .
 218 
 219   Block<StackFrame frame>
 220   =                                  (. Table.OpenScope(); .)
 221      "{" { Statement<frame> }
 222      WEAK "}"                        (. Table.CloseScope(); .)
 223   .
 224 
 225   ConstDeclarations
 226   = "const" OneConst { WEAK "," OneConst }
 227     WEAK ";"
 228   .
 229 
 230   OneConst                   (. Entry constant = new Entry();
 231                                 ConstRec con; .)
 232   =  Ident<out constant.name> (. constant.kind = Kinds.Con; .)
 233      AssignOp Constant<out con>  
 234 			            (. constant.value = con.value;
 235                                constant.type = con.type;
 236                                Table.Insert(constant); .)
 237   .
 238 
 239   Constant<out ConstRec con>       (. con = new ConstRec(); .)
 240   =   IntConst<out con.value>  (. con.type = Types.intType; .)
 241     | CharConst<out con.value>(. con.type = Types.charType; .)
 242     | "true"                     (. con.type = Types.boolType; 
 243 						    con.value = 1; .)
 244     | "false"                    (. con.type = Types.boolType;
 245 						    con.value = 0; .)
 246     | "null"                     (. con.type = Types.nullType;
 247 						    con.value = 0; .)
 248   .
 249 
 250   VarDeclarations<StackFrame frame>          (. int type; .)
 251   =  Type<out type>
 252      VarList<frame, type>
 253      WEAK ";"
 254   .
 255 
 256   Type<out int type>
 257   =  BasicType<out type>
 258      [ "[]"                                  (. type++; .)
 259      ] .
 260 
 261 
 262   BasicType<out int type>         (. type = Types.noType; .)
 263   =   "int"                       (. type = Types.intType; .)
 264     | "bool"                      (. type = Types.boolType; .)
 265     | "char"                      (. type = Types.charType; .)
 266   .
 267 
 268 
 269   VarList<StackFrame frame, int type>
 270   =  OneVar<frame, type>
 271      { WEAK "," OneVar<frame, type> }
 272   .
 273 
 274   OneVar<StackFrame frame, int type>    (. int expType;
 275                                    Entry var = new Entry(); .)
 276   =  Ident<out var.name>           (. var.kind = Kinds.Var;
 277                                       var.type = type;
 278                                       var.offset = frame.size;
 279                                       frame.size++; .)
 280      [ AssignOp                (. CodeGen.LoadAddress(var); .)
 281        Expression<out expType>   (. if (!Assignable(var.type,
 282 							 expType))
 283                  SemError("incompatible types in assignment");
 284                                   CodeGen.Assign(var.type); .)
 285      ]                                (. Table.Insert(var); .)
 286   .
 287 
 288 
 289   AssignmentOrCall                     (. int expType;
 290                                           DesType des; .)
 291   =  (  IF (IsCall(out des)) // resolver handles LL1 conflict
 292          identifier               (. CodeGen.FrameHeader(); .)
 293          "(" Arguments<des> ")"   (. CodeGen.Call
 294 						    (des.entry.entryPoint); .)
 295       |  Designator<out des>      (. if (des.entry.kind !=
 296 								 Kinds.Var)
 297                          		SemError("cannot assign to " + 
 298 				    Kinds.kindNames[des.entry.kind]); .)
 299          AssignOp
 300          Expression<out expType>  (. if (!Assignable(des.type,
 301 							 expType))
 302                                 SemError("incompatible types in assignment");
 303                                 CodeGen.Assign(des.type); .)
 304      ) WEAK ";"
 305   .
 306 
 307   Arguments<DesType des>        (. int argCount = 0;
 308                            Entry fp = des.entry.firstParam; .)
 309   =  [ OneArg<fp>               (. argCount++; if (fp != null)
 310 							 fp = fp.nextInScope; .)
 311        { WEAK "," OneArg<fp>    (. argCount++; if (fp != null)
 312 							 fp = fp.nextInScope;.)
 313        }
 314      ]                          (. if (argCount !=
 315 								 des.entry.nParams)
 316                      SemError("wrong number of arguments"); .)
 317   .
 318 
 319   OneArg<Entry fp>                 (. int argType; .)
 320   =  (  Expression<out argType>    (. if (fp != null && 
 321 						!Assignable(fp.type, argType))
 322                         SemError("argument type mismatch"); .)
 323      )
 324   .
 325 
 326   Designator<out DesType des>           (. string name;
 327                                            int indexType; .)
 328   =  Ident<out name>        (. Entry entry = Table.Find(name);
 329                                if (!entry.declared)
 330                            SemError("undeclared identifier");
 331                                des = new DesType(entry);
 332                                if (entry.kind == Kinds.Var)
 333                                 CodeGen.LoadAddress(entry); .)
 334      [  "["              	 (. if (IsArray(des.type))
 335 							 des.type--;
 336                         		else 
 337 					  SemError("unexpected subscript");
 338                                if (des.entry.kind !=
 339 								 Kinds.Var)
 340                              SemError("unexpected subscript"); 
 341                                CodeGen.Dereference(); .)
 342         Expression<out indexType>  (. if (!IsArith(indexType))
 343                            SemError("invalid subscript type");
 344                                       CodeGen.Index(); .)
 345 
 346            "]"
 347      ]
 348   .
 349 
 350   IfStatement<StackFrame frame>
 351                    			          (. Label falseLabel = 
 352 							                    new Label(!known);                                  
 353                                   Label ifExit = new Label(!known); .)
 354                                    
 355 
 356 
 357   =  "if" "(" Condition ")"   ["then" (. SemError("Should 'then' be here?");.)]     (. CodeGen.BranchFalse
 358 							                	(falseLabel); .)
 359         Statement<frame>        (. CodeGen.Branch(ifExit) ; falseLabel.Here(); .)
 360 
 361        {                            (. Label elsIfExit = new Label (!known); .)
 362          "elsif" "(" Condition ")" (.  CodeGen.BranchFalse(elsIfExit);.)
 363          Statement<frame>         (. CodeGen.Branch(ifExit) ; elsIfExit.Here(); .)       
 364        }
 365 
 366        [ "else" Statement<frame>  ] (. ifExit.Here(); .)
 367 
 368      
 369   .
 370 
 371 
 372   WhileStatement<StackFrame frame>    (. Label loopExit  =
 373 								 new Label(!known);
 374                                          Label loopStart =
 375 							    new Label(known); .)
 376   =  "while" "(" Condition ")"        (. CodeGen.BranchFalse
 377 								(loopExit); .)
 378      Statement<frame>                 (. CodeGen.Branch
 379 								(loopStart);
 380                                          loopExit.Here(); .)
 381   .
 382 
 383   DoWhileStatement<StackFrame frame>    (. Label loopExit  =
 384 								 new Label(!known);
 385                                          Label loopStart =
 386 							    new Label(known); .)
 387   =   "do" Statement<frame>      
 388   
 389   "while" "(" Condition ")"        (. CodeGen.BranchFalse(loopExit); 
 390                                       CodeGen.Branch(loopStart);
 391                                       loopExit.Here(); .)     
 392   .
 393   
 394   RepeatStatement<StackFrame frame>     (. Label loopExit  =
 395 								 new Label(!known);
 396                                          Label loopStart =
 397 							    new Label(known); .)
 398 
 399   = "repeat" {Statement<frame>}        
 400 
 401     "until" "(" Condition ")" (. CodeGen.BranchFalse(loopStart);
 402                                  CodeGen.Branch(loopExit);
 403                                  loopExit.Here();
 404                                   .)    
 405   . 
 406 
 407   SwitchStatement<StackFrame frame>       (. int expType; .)
 408   = "switch"
 409     "(" Expression<out expType>
 410     ")" "{"
 411       { CaseLabelList
 412         Statement<frame>
 413         { Statement<frame>
 414         } }
 415       [ "default" ":"
 416         { Statement<frame>
 417         } ]
 418     "}"
 419   .
 420 
 421   CaseLabelList
 422   = CaseLabel { CaseLabel }
 423   .
 424 
 425   CaseLabel                              	(. ConstRec con; .)
 426   = "case" [ "+" | "-" ]
 427     Constant<out con>
 428     ":"
 429   .
 430                                         
 431   HaltStatement<string printMsg = "">
 432   =  "halt"                     (. CodeGen.WriteString(printMsg); CodeGen.LeaveProgram(); .)
 433      WEAK ";"
 434   .
 435 
 436   ReturnStatement
 437   =  "return"               (. CodeGen.LeaveVoidFunction(); .)
 438      WEAK ";"
 439   .
 440 
 441   ReadStatement
 442   = "read" "(" ReadList ")" WEAK ";"
 443     | "readLine"  "(" ReadListLine ")" WEAK ";"
 444   .
 445 
 446   ReadListLine
 447   = ReadElement { WEAK "," ReadElement } (. CodeGen.ReadLine(); .)
 448   .
 449   ReadList
 450   = ReadElement { WEAK "," ReadElement } 
 451   .
 452 
 453 
 454   ReadElement                        (. string str;
 455                                         DesType des; .)
 456   =   StringConst<out str>     (. CodeGen.WriteString(str); .)
 457     | Designator<out des>            (. if (des.entry.kind !=
 458 								 Kinds.Var)
 459                          SemError("wrong kind of identifier");
 460                                   switch (des.type) {
 461                                     case Types.intType:
 462                                     case Types.boolType:
 463                                     case Types.charType:
 464                                        CodeGen.Read(des.type);
 465 							  break;
 466                                     default:
 467                             SemError("cannot read this type");
 468 							  break;
 469                                                     } .)
 470   .
 471 
 472   WriteStatement
 473   =  "write" "(" WriteList ")" WEAK ";"
 474   | "writeLine" "(" WriteListLine ")" WEAK ";"
 475   .
 476 
 477   WriteListLine
 478   = WriteElement { WEAK "," WriteElement } (. CodeGen.WriteLine(); .)
 479   .
 480 
 481   WriteList
 482   = WriteElement { WEAK "," WriteElement }
 483   .
 484 
 485   WriteElement                  (. int expType; string str;.)
 486   =   StringConst<out str>      (. CodeGen.WriteString(str);.)
 487     | Expression<out expType>   (. if (!(IsArith(expType) ||
 488 						 expType == Types.boolType))
 489                            SemError("cannot write this type");
 490                                  switch (expType) {
 491                                    case Types.intType:
 492                                    case Types.boolType:
 493                                    case Types.charType:
 494                                      CodeGen.Write(expType);
 495 							break;
 496                                    default:  break;
 497                                                     } .)
 498   .
 499 
 500   Condition                       (. int type; .)
 501   =  Expression<out type>         (. if (!IsBool(type))
 502                      SemError("Boolean expression needed");.)
 503   .
 504 
 505   Expression<out int type>        (. int type2;
 506                     Label shortcircuit = new Label(!known); .)
 507   =  AndExp<out type>
 508      { "||"                       (. CodeGen.BooleanOp
 509 						(shortcircuit, CodeGen.or); .)
 510        AndExp<out type2>          (. if (!IsBool(type) || 
 511 								!IsBool(type2))
 512                           SemError("Boolean operands needed");
 513                                      type = Types.boolType; .)
 514      }                            (. shortcircuit.Here(); .)
 515   .
 516 
 517   AndExp<out int type>            (. int type2;
 518                                      Label shortcircuit = new
 519 								 Label(!known); .)
 520   =  EqlExp<out type>
 521      { "&&"                       (. CodeGen.BooleanOp
 522 					(shortcircuit, CodeGen.and); .)
 523        EqlExp<out type2>          (. if (!IsBool(type) || 
 524 							!IsBool(type2))
 525                        SemError("Boolean operands needed");
 526                                      type = Types.boolType; .)
 527      }                            (. shortcircuit.Here(); .)
 528   .
 529 
 530   EqlExp<out int type>            (. int type2;
 531                                      int op; .)
 532   =  RelExp<out type>
 533      { EqualOp<out op>
 534        RelExp<out type2>      (. if (!Compatible(type, type2))
 535                        SemError("incomparable operand types");
 536                                  CodeGen.Comparison(op, type);
 537                                  type = Types.boolType; .)
 538      }
 539   .
 540 
 541   RelExp<out int type>           (. int type2; int op; .)
 542   =  AddExp<out type>
 543      [ RelOp<out op>
 544        AddExp<out type2>         (. if (!IsArith(type) || 
 545 								!IsArith(type2))
 546                     SemError("incomparable operand types");
 547                                  CodeGen.Comparison(op, type);
 548                                  type = Types.boolType; .)
 549      ]
 550   .
 551 
 552   AddExp<out int type>           (. int type2; int op; .)
 553   =  MultExp<out type>
 554      { AddOp<out op>
 555        MultExp<out type2>        (. if (IsArith(type) &&
 556 							 IsArith(type2)) {
 557                                       type = Types.intType;
 558                                       CodeGen.BinaryOp(op);
 559                                      }
 560                                     else {
 561                        SemError("arithmetic operands needed");
 562                                           type = Types.noType;
 563                                          } .)
 564      }
 565   .
 566 
 567   MultExp<out int type>           (. int type2; int op; .)
 568   =  Factor<out type>
 569      { MulOp<out op>
 570        Factor<out type2>          (. if (IsArith(type) &&
 571 							   IsArith(type2)) {
 572                                        type = Types.intType;
 573                                        CodeGen.BinaryOp(op);
 574                                        }
 575                                       else {
 576                        SemError("arithmetic operands needed");
 577                                           type = Types.noType;
 578                                            } .)
 579      }
 580   .
 581 
 582   Factor<out int type>              (. type = Types.noType; .)
 583   =    Primary<out type>
 584      | "+" Factor<out type>         (. if (!IsArith(type)) {
 585                         SemError("arithmetic operand needed");
 586                                           type = Types.noType;
 587                                         }
 588                                        else 
 589 							type = Types.intType; .)
 590      | "-" Factor<out type>         (. if (!IsArith(type)) {
 591                         SemError("arithmetic operand needed");
 592                                           type = Types.noType;
 593                                         }
 594                                        else
 595 							   type = Types.intType;
 596                                     CodeGen.NegateInteger();.)
 597      | "!" Factor<out type>     (. if (!IsBool(type))
 598                            SemError("Boolean operand needed");
 599                                    type = Types.boolType;
 600                                    CodeGen.NegateBoolean(); .)
 601   .
 602 
 603   Primary<out int type>         (. type = Types.noType;
 604                                    int size;
 605                                    DesType des;
 606                                    ConstRec con; .)
 607   =    Designator<out des>      (. type = des.type;
 608                                    switch (des.entry.kind) {
 609                                     case Kinds.Var:
 610                                         CodeGen.Dereference();
 611                                         break;
 612                                     case Kinds.Con:
 613                         CodeGen.LoadConstant(des.entry.value);
 614                                         break;
 615                                     default:
 616                          SemError("wrong kind of identifier");
 617                                         break;
 618                                     } .)
 619      | Constant<out con>        (. type = con.type;
 620                             CodeGen.LoadConstant(con.value);.)
 621      | "new"
 622        (   BasicType<out type>
 623            "[" Expression<out size>    (. if (!IsArith(size))
 624                        SemError("array size must be integer");
 625                                           type++; .)
 626            "]"
 627        )                             (. CodeGen.Allocate(); .)
 628 
 629      | "("
 630        (   "char" ")"
 631            Factor<out type>     	     (. if (!IsArith(type))
 632                                      SemError("invalid cast");
 633                                        else 
 634 							  type = Types.charType;
 635                                       CodeGen.CastToChar(); .)
 636          | "int" ")"
 637            Factor<out type>          (. if (!IsArith(type))
 638                                      SemError("invalid cast");
 639                                        else 
 640 							type = Types.intType; .)
 641          | Expression<out type> ")"
 642        )
 643   .
 644 
 645   AddOp<out int op>                   	(. op = CodeGen.nop; .)
 646   =    "+"                            (. op = CodeGen.add; .)
 647      | "-"                            (. op = CodeGen.sub; .)
 648   .
 649 
 650   MulOp<out int op>                   (. op = CodeGen.nop; .)
 651   =    "*"                            (. op = CodeGen.mul; .)
 652      | "/"                            (. op = CodeGen.div; .)
 653      | "%"                            (. op = CodeGen.rem; .)
 654   .
 655 
 656   EqualOp<out int op>                 (. op = CodeGen.nop; .)
 657   =    "=="                           (. op = CodeGen.ceq; .)
 658      | "!="                           (. op = CodeGen.cne; .)                           
 659      | "="                            (. SemError("Did you mean == ?"); op = CodeGen.ceq; .)
 660      | "<>"                           (. SemError("Did you mean != ?"); op = CodeGen.cne; .)      
 661   .
 662 
 663   RelOp<out int op>                   (. op = CodeGen.nop; .)
 664   =    "<"                            (. op = CodeGen.clt; .)
 665      | "<="                           (. op = CodeGen.cle; .)
 666      | ">"                            (. op = CodeGen.cgt; .)
 667      | ">="                           (. op = CodeGen.cge; .)
 668   .
 669 
 670   AssignOp = 
 671         "=" 
 672       | ":="                          (. SemError("Did you mean '=' ?"); .)
 673   .
 674 
 675   Ident<out string name>
 676   =  identifier                       (. name = token.val; .)
 677   .
 678 
 679   StringConst<out string str>
 680   =  stringLit                        (. str = token.val;
 681                                          str = Unescape
 682 				(str.Substring(1, str.Length - 2)); .)
 683   .
 684 
 685   CharConst<out int value>
 686   =  charLit                        (. string str = token.val;
 687                                        str = Unescape
 688 					(str.Substring(1, str.Length - 2));
 689                                        value = str[0]; .)
 690   .
 691 
 692   IntConst<out int value>
 693   =  number                         (. try {value =
 694 						 Convert.ToInt32(token.val);
 695                                        } catch (Exception) {
 696                                          value = 0; 
 697 					SemError("number out of range");
 698                                              } .)
 699   .
 700 
 701 END Parva.
 702 

0 errors detected
4 warnings detected
